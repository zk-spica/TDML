nodeStack[++nNodeStack].node = new DOMNode(0);
domRoot = nodeStack[1].node;
nodeStack[nNodeStack].lastChild = NULL;
nodeStack[nNodeStack-1].node->firstChild = nodeStack[nNodeStack].node;
nodeStack[nNodeStack-1].lastChild = nodeStack[nNodeStack].node;
nodeStack[++nNodeStack].node = new DOMNode(1);
nodeStack[nNodeStack].lastChild = NULL;
nodeStack[nNodeStack-1].node->firstChild = nodeStack[nNodeStack].node;
nodeStack[nNodeStack-1].lastChild = nodeStack[nNodeStack].node;
nodeStack[++nNodeStack].node = new DOMNode(3);
nodeStack[nNodeStack].lastChild = NULL;
property = new Property(-1);
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(-1);
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(-1);
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(2);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 0;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(1);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 11;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(0);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 10;
nodeStack[nNodeStack].node->property.push_back(property);
nodeStack[nNodeStack-1].node->firstChild = nodeStack[nNodeStack].node;
nodeStack[nNodeStack-1].lastChild = nodeStack[nNodeStack].node;
nNodeStack--;
nNodeStack--;
nodeStack[++nNodeStack].node = new DOMNode(2);
nodeStack[nNodeStack].lastChild = NULL;
nodeStack[nNodeStack-1].lastChild->nextSibling = nodeStack[nNodeStack].node;
nodeStack[nNodeStack-1].lastChild = nodeStack[nNodeStack].node;
nodeStack[++nNodeStack].node = new DOMNode(5);
nodeStack[nNodeStack].lastChild = NULL;
property = new Property(0);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 7;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(5);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 5;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(4);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 5;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(3);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 7;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(6);
property->valueForm = 0;
property->value = malloc(sizeof(float)*3);
*(float*)property->value = 0.000000;
*((float*)property->value+1) = 1.000000;
*((float*)property->value+2) = 0.000000;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(8);
property->valueForm = 0;
property->value = malloc(sizeof(char));
*(char*)property->value = 'w';
nodeStack[nNodeStack].node->property.push_back(property);
nodeStack[nNodeStack-1].node->firstChild = nodeStack[nNodeStack].node;
nodeStack[nNodeStack-1].lastChild = nodeStack[nNodeStack].node;
nodeStack[++nNodeStack].node = new DOMNode(5);
nodeStack[nNodeStack].lastChild = NULL;
property = new Property(6);
property->valueForm = 0;
property->value = malloc(sizeof(float)*3);
*(float*)property->value = 0.000000;
*((float*)property->value+1) = 1.000000;
*((float*)property->value+2) = 0.000000;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(5);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 2;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(4);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 2;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(3);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 2;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(0);
property->valueForm = 1;
property->value = malloc(sizeof(float));
*(float*)property->value = -20;
nodeStack[nNodeStack].node->property.push_back(property);
nodeStack[nNodeStack-1].node->firstChild = nodeStack[nNodeStack].node;
nodeStack[nNodeStack-1].lastChild = nodeStack[nNodeStack].node;
nNodeStack--;
nodeStack[++nNodeStack].node = new DOMNode(6);
nodeStack[nNodeStack].lastChild = NULL;
property = new Property(8);
property->valueForm = 0;
property->value = malloc(sizeof(char));
*(char*)property->value = 'w';
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(7);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 2;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(0);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 1.5;
nodeStack[nNodeStack].node->property.push_back(property);
nodeStack[nNodeStack-1].lastChild->nextSibling = nodeStack[nNodeStack].node;
nodeStack[nNodeStack-1].lastChild = nodeStack[nNodeStack].node;
nNodeStack--;
nNodeStack--;
nodeStack[++nNodeStack].node = new DOMNode(5);
nodeStack[nNodeStack].lastChild = NULL;
property = new Property(0);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = -2;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(10);
property->valueForm = 0;
property->value = malloc(sizeof(char*));
*((char**)(property->value)) = "sun.bmp";
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(5);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 2;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(4);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 2;
nodeStack[nNodeStack].node->property.push_back(property);
property = new Property(3);
property->valueForm = 0;
property->value = malloc(sizeof(float));
*(float*)property->value = 2;
nodeStack[nNodeStack].node->property.push_back(property);
nodeStack[nNodeStack-1].lastChild->nextSibling = nodeStack[nNodeStack].node;
nodeStack[nNodeStack-1].lastChild = nodeStack[nNodeStack].node;
nNodeStack--;
nNodeStack--;
nNodeStack--;
